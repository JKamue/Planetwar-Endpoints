openapi: 3.0.0
info:
  title: Planetwar Api
  version: '1.0'
  contact:
    name: Jannes Kaspar-MÃ¼ller
    url: 'https://jkamue.de'
    email: mail@jkamue.de
  description: ''
servers:
  - url: 'https://planetwar.jkamue.de/api'
    description: ' Official game server'
  - url: 'http://localhost:82/api'
    description: ' My local developement server'
paths:
  /map:
    get:
      summary: Query whole map
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-map
      tags:
        - Gameinformation
      description: Receive a detailed list of everything on the map
      security:
        - Account-Key: []
        - Game-Key: []
      parameters: []
  /stats:
    get:
      summary: Query player list and info
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-stats
      security:
        - Account-Key: []
        - Game-Key: []
      description: Receive stats of each player in the round
  /round:
    get:
      summary: Query round information
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-round
      description: Returns important data of current round
      security:
        - Account-Key: []
        - Game-Key: []
  /events:
    get:
      summary: Query events
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-events
      description: Receives a List with all battles
      security:
        - Account-Key: []
        - Game-Key: []
    parameters: []
  /move:
    post:
      summary: Move ships
      operationId: post-move
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Number of turns shipts will take till they arrive
                properties:
                  arrival:
                    type: integer
                  time:
                    type: integer
                required:
                  - arrival
                  - time
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Actions
      description: |-
        Move ships from one location of the other.
        You need enough ships at the start location!
        If you don't have any / enoughs ships at the start 400 will be returned
      security:
        - Account-Key: []
        - Game-Key: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Start:
                  $ref: '#/components/schemas/Location'
                End:
                  $ref: '#/components/schemas/Location'
                Amount:
                  type: integer
                  exclusiveMinimum: false
                  minimum: 1
              required:
                - Start
                - End
                - Amount
        description: ''
  /sent:
    get:
      summary: Query sent ships
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: List of sent ships
                items:
                  $ref: '#/components/schemas/Sent'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-sent
      description: Receives a list of your sent ships
      security:
        - Account-Key: []
        - Game-Key: []
  '/join/{visitor}':
    parameters:
      - schema:
          type: boolean
        name: visitor
        in: path
        description: You can join as a visitor or player
        required: true
    post:
      summary: Join a game
      operationId: post-join-visitor
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: The game key that has to be set from now on
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameId:
                  type: string
                gameCode:
                  type: string
              required:
                - gameId
                - gameCode
        description: GameCode only has to be set if not joining as visitor
      security:
        - Account-Key: []
      description: Join a newly created game. Returns 400 if game already started and visitor is false
      tags:
        - Actions
  /create:
    post:
      summary: Create game
      operationId: post-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    type: string
                  gameCode:
                    type: string
                required:
                  - gameId
                  - gameCode
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Actions
      description: |-
        Creates a new game with given parameters and returns game ID and code for others to join.
        Player doesnt join automatically and has to make a seperate request to join.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ships:
                  type: integer
                  minimum: 5
                  maximum: 80
                production:
                  type: integer
                  minimum: 5
                  maximum: 30
                players:
                  type: integer
                  minimum: 2
                  maximum: 8
                size:
                  type: integer
                  minimum: 7
                  maximum: 20
              required:
                - ships
                - production
                - players
                - size
      security:
        - Account-Key: []
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: Account key that has to be set from now on
        '401':
          description: 'Unauthorized, when login failed, reason will be described in error message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Log into an existing account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      tags:
        - Actions
  /update:
    post:
      summary: ''
      operationId: post-update
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
        '400':
          description: Bad Request - if game-id header not present or wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - System
      description: Should be called every few seconds since the php backend has a hard time calling it itself. Requires no authorization
      parameters:
        - schema:
            type: string
          in: header
          name: Game-Id
          required: true
components:
  schemas:
    Location:
      title: Location
      type: object
      properties:
        X:
          type: integer
          minimum: 0
          description: X coordinate on map
        'Y':
          type: integer
          minimum: 0
          description: Y coordinate on map
      required:
        - X
        - 'Y'
    Tile:
      title: Tile
      type: object
      description: Stores the objects of one map tile
      properties:
        location:
          $ref: '#/components/schemas/Location'
        ships:
          type: integer
        planet:
          $ref: '#/components/schemas/Planet'
        hasPlanet:
          type: boolean
          description: Planet is only set if hasPlanet is true
        owner:
          $ref: '#/components/schemas/Owner'
        hidden:
          type: boolean
          description: 'If hidden is true owner, planet and ships will not be set'
      required:
        - location
        - hasPlanet
        - hidden
    Planet:
      title: Planet
      type: object
      description: Stores planet information
      properties:
        production:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          description: Production of ships per round
        skin:
          type: integer
          minimum: 0
          description: The planets skin
      required:
        - production
        - skin
    Owner:
      title: Owner
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The owner uuid
        name:
          type: string
          description: Owner display name
      required:
        - id
        - name
    Map:
      title: Map
      type: object
      description: A collection of tiles that make up the map
      x-examples: {}
      properties:
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/Tile'
        size:
          type: integer
          minimum: 0
          description: Height and width of the square map
      required:
        - tiles
        - size
    Error:
      title: Error
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        description:
          type: string
      required:
        - id
        - title
        - description
    Stats:
      title: Stats
      type: object
      description: Stats for one player
      properties:
        visibleShips:
          type: integer
          minimum: 0
        planets:
          type: integer
          minimum: 0
        owner:
          $ref: '#/components/schemas/Owner'
      required:
        - visibleShips
        - planets
    Round:
      title: Round
      type: object
      properties:
        number:
          type: integer
        start:
          type: string
          description: 'Vermutlich unix epoch oder YYYY-MM-DD H:i:s'
        length:
          type: integer
      required:
        - number
        - start
        - length
    Event:
      title: Event
      type: object
      description: Information about a battle
      properties:
        id:
          type: string
        attacker:
          $ref: '#/components/schemas/Owner'
        defender:
          $ref: '#/components/schemas/Owner'
        attackerWon:
          type: boolean
        location:
          $ref: '#/components/schemas/Location'
        attackerShips:
          type: integer
        defenderShips:
          type: integer
        attackerShipsLost:
          type: integer
        defenderShipslost:
          type: integer
        round:
          type: integer
    Sent:
      title: Sent
      type: object
      properties:
        id:
          type: string
        start:
          $ref: '#/components/schemas/Location'
        end:
          $ref: '#/components/schemas/Location'
        sentAt:
          type: integer
          description: Round ships were sent at
        arriveAt:
          type: integer
          description: Round the ships will arrive at
        amount:
          type: integer
      required:
        - id
        - start
        - end
        - sentAt
        - arriveAt
  securitySchemes:
    Account-Key:
      type: apiKey
      in: header
      description: This is one of your accounts keys
      name: Account-Key
    Game-Key:
      type: apiKey
      in: header
      description: This your access key to the your current game
      name: Game-Key
