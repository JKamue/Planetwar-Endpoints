openapi: 3.0.0
info:
  title: Planetwar Api
  version: '1.0'
  contact:
    name: Jannes Kaspar-MÃ¼ller
    url: 'https://jkamue.de'
    email: mail@jkamue.de
  description: ''
servers:
  - url: 'https://planetwar.jkamue.de/api'
    description: ' Official game server'
  - url: 'http://localhost:81/api'
    description: ' My local developement server'
  - description: ' Test Server'
    url: 'https://dummy.planetwar.jkamue.de/api'
paths:
  /map:
    get:
      summary: Query whole map
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-map
      tags:
        - Gameinformation
      description: Receive a detailed list of everything on the map
      security:
        - account-key: []
        - game-key: []
      parameters: []
  /stats:
    get:
      summary: Query player list and info
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-stats
      security:
        - account-key: []
        - game-key: []
      description: Receive stats of each player in the round
  /round:
    get:
      summary: Query round information
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-round
      description: Returns important data of current round
      security:
        - account-key: []
        - game-key: []
  '/events/{round}':
    get:
      summary: Query events
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-events
      description: Receives a List with all battles
      security:
        - account-key: []
        - game-key: []
    parameters:
      - schema:
          type: integer
          minimum: 0
          exclusiveMinimum: true
        name: round
        in: path
        required: true
        description: specify the round for which events are shown
  /move:
    post:
      summary: Move ships
      operationId: post-move
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: Number of turns shipts will take till they arrive
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Actions
      description: |-
        Move ships from one location of the other.
        You need enough ships at the start location!
        If you don't have any / enoughs ships at the start 400 will be returned
      security:
        - account-key: []
        - game-key: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Start:
                  $ref: '#/components/schemas/Location'
                End:
                  $ref: '#/components/schemas/Location'
                Amount:
                  type: integer
                  exclusiveMinimum: false
                  minimum: 1
              required:
                - Start
                - End
                - Amount
        description: ''
  /sent:
    get:
      summary: Query sent ships
      tags:
        - Gameinformation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: List of sent ships
                items:
                  $ref: '#/components/schemas/Sent'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-sent
      description: Receives a list of your sent ships
      security:
        - account-key: []
        - game-key: []
  '/join/{visitor}':
    parameters:
      - schema:
          type: boolean
        name: visitor
        in: path
        description: You can join as a visitor or player
        required: true
    post:
      summary: Join a game
      operationId: post-join-visitor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: The game key that has to be set from now on
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameId:
                  type: string
                gameCode:
                  type: string
      security:
        - account-key: []
      description: Join a newly created game. Returns 400 if game already started.
      tags:
        - Actions
  /create:
    post:
      summary: Create game
      operationId: post-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    type: string
                  gameCode:
                    type: string
                required:
                  - gameId
                  - gameCode
      tags:
        - Actions
      description: |-
        Creates a new game with given parameters and returns game ID and code for others to join.
        Player doesnt join automatically and has to make a seperate request to join.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                size:
                  type: integer
                ships:
                  type: integer
                production:
                  type: integer
                players:
                  type: integer
                  minimum: 2
              required:
                - size
                - ships
                - production
                - players
      security:
        - account-key: []
  /login: {}
components:
  schemas:
    Ships:
      title: Ships
      type: object
      description: Collection of ships
      properties:
        location:
          $ref: '#/components/schemas/Location'
        amount:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'
      required:
        - location
        - amount
        - owner
    Location:
      title: Location
      type: object
      properties:
        X:
          type: integer
          minimum: 0
          description: X coordinate on map
        'Y':
          type: integer
          minimum: 0
          description: Y coordinate on map
      required:
        - X
        - 'Y'
    Tile:
      title: Tile
      type: object
      description: Stores the objects of one map tile
      properties:
        location:
          $ref: '#/components/schemas/Location'
        ships:
          $ref: '#/components/schemas/Ships'
        hasShips:
          type: boolean
          description: Ships is only set if hasShips is true
        planet:
          $ref: '#/components/schemas/Planet'
        hasPlanet:
          type: boolean
          description: Planet is only set if hasPlanet is true
      required:
        - location
        - hasShips
        - hasPlanet
    Planet:
      title: Planet
      type: object
      description: Stores planet information
      properties:
        location:
          $ref: '#/components/schemas/Location'
        owner:
          $ref: '#/components/schemas/Owner'
        production:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          description: Production of ships per round
        skin:
          type: integer
          minimum: 0
          description: The planets skin
      required:
        - location
        - owner
        - production
        - skin
    Owner:
      title: Owner
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The owner uuid
        name:
          type: string
          description: Owner display name
      required:
        - id
        - name
    Map:
      title: Map
      type: object
      description: A collection of tiles that make up the map
      x-examples: {}
      properties:
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/Tile'
        size:
          type: integer
          minimum: 0
          description: Height and width of the square map
      required:
        - tiles
        - size
    Error:
      title: Error
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        description:
          type: string
      required:
        - id
        - title
        - description
    Stats:
      title: Stats
      type: object
      description: Stats for one player
      properties:
        visibleShips:
          type: integer
          minimum: 0
        planets:
          type: integer
          minimum: 0
        you:
          type: boolean
        alive:
          type: boolean
        owner:
          $ref: '#/components/schemas/Owner'
      required:
        - visibleShips
        - planets
        - you
        - alive
    Round:
      title: Round
      type: object
      properties:
        number:
          type: integer
        start:
          type: string
          description: 'Vermutlich unix epoch oder YYYY-MM-DD H:i:s'
        length:
          type: integer
      required:
        - number
        - start
        - length
    Event:
      title: Event
      type: object
      description: Information about a battle
      properties:
        id:
          type: string
        attacker:
          $ref: '#/components/schemas/Owner'
        defender:
          $ref: '#/components/schemas/Owner'
        attackerWon:
          type: boolean
        location:
          $ref: '#/components/schemas/Location'
        attackerShips:
          type: integer
        defenderShips:
          type: integer
        attackerShipsLost:
          type: integer
        defenderShipslost:
          type: integer
        round:
          type: integer
    Sent:
      title: Sent
      type: object
      properties:
        id:
          type: string
        start:
          $ref: '#/components/schemas/Location'
        end:
          $ref: '#/components/schemas/Location'
        sentAt:
          type: integer
          description: Round ships were sent at
        arriveAt:
          type: integer
          description: Round the ships will arrive at
        amount:
          type: integer
      required:
        - id
        - start
        - end
        - sentAt
        - arriveAt
  securitySchemes:
    account-key:
      type: apiKey
      in: header
      description: This is one of your accounts keys
      name: Account-Key
    game-key:
      type: apiKey
      in: header
      description: This your access key to the your current game
      name: Game-Key
